<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>理解手工测试与自动化测试的核心差异：“破坏”与“验证”</title>
    <link href="/2025/09/29/%E7%90%86%E8%A7%A3%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%9A%84%E6%A0%B8%E5%BF%83%E5%B7%AE%E5%BC%82%EF%BC%9A%E2%80%9C%E7%A0%B4%E5%9D%8F%E2%80%9D%E4%B8%8E%E2%80%9C%E9%AA%8C%E8%AF%81%E2%80%9D/"/>
    <url>/2025/09/29/%E7%90%86%E8%A7%A3%E6%89%8B%E5%B7%A5%E6%B5%8B%E8%AF%95%E4%B8%8E%E8%87%AA%E5%8A%A8%E5%8C%96%E6%B5%8B%E8%AF%95%E7%9A%84%E6%A0%B8%E5%BF%83%E5%B7%AE%E5%BC%82%EF%BC%9A%E2%80%9C%E7%A0%B4%E5%9D%8F%E2%80%9D%E4%B8%8E%E2%80%9C%E9%AA%8C%E8%AF%81%E2%80%9D/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs">大家好吖~ 我又来分享记录啦！这次内容主要是关于“ 手工测试的目的是通过“破坏”发现系统有bug，自动化测试目的‘验证’系统没有bug ”这个比喻的理解，也更清晰的了解两者之间目的的差异，这次内容既是给自己的学习留个脚印，也希望能和同样起步的小伙伴交流；若内容有理解偏差或疏漏，特别欢迎前辈们在评论区指正！</code></pre><h3 id="理解手工测试与自动化测试的核心差异：“破坏”与“验证”"><a href="#理解手工测试与自动化测试的核心差异：“破坏”与“验证”" class="headerlink" title="理解手工测试与自动化测试的核心差异：“破坏”与“验证”"></a>理解手工测试与自动化测试的核心差异：“破坏”与“验证”</h3><p>在软件测试领域，有一个非常精辟的比喻：<strong>手工测试的目的是通过“破坏”来发现系统有Bug，而自动化测试的目的是通过“验证”来确认系统没有Bug。</strong> 这句话深刻地揭示了两者在思维模式和终极目标上的根本不同。下面，我们通过一个详细的对比表格和讲解来深入理解这一概念。</p><h4 id="核心对比表格"><a href="#核心对比表格" class="headerlink" title="核心对比表格"></a>核心对比表格</h4><table><thead><tr><th align="left">特性维度</th><th align="left">手工测试</th><th align="left">自动化测试</th></tr></thead><tbody><tr><td align="left"><strong>核心目标</strong></td><td align="left"><strong>发现</strong>未知的、深层次的缺陷。</td><td align="left"><strong>验证</strong>已知的、核心的功能没有因变更而失效。</td></tr><tr><td align="left"><strong>思维模式</strong></td><td align="left"><strong>探索性、批判性、创造性</strong>（像侦探）。主动怀疑并尝试“破坏”系统。</td><td align="left"><strong>确认性、重复性、守护性</strong>（像哨兵）。严格遵循预设规则进行“验证”。</td></tr><tr><td align="left"><strong>典型例子与讲解</strong></td><td align="left"><strong>1. 边界值测试：</strong> 在年龄输入框输入“-1”或“1000”。<br><strong>讲解：</strong> 检验程序对异常输入的处理能力，这是创造性思维的体现。<br><strong>2. 异常流程测试：</strong> 支付时突然断网，然后恢复。<br><strong>讲解：</strong> 模拟真实世界的不确定性，探索系统的健壮性。</td><td align="left"><strong>1. 登录回归测试：</strong> 脚本自动输入正确用户名&#x2F;密码，验证能否跳转到首页。<br><strong>讲解：</strong> 每次发布新版本后自动运行，确保登录功能未被新代码破坏。<br><strong>2. 数据校验测试：</strong> 自动批量生成合规数据，验证系统能否正常提交。<br><strong>讲解：</strong> 快速完成大量重复性工作，保证效率与一致性。</td></tr><tr><td align="left"><strong>最佳应用场景</strong></td><td align="left">1. 新功能测试<br>2. 探索性测试（无固定脚本）<br>3. 用户体验(UI&#x2F;UX)评估<br>4. 可用性、可访问性测试</td><td align="left">1. 回归测试（核心重点）<br>2. 冒烟测试（构建后的快速检查）<br>3. 大规模数据驱动测试<br>4. 性能测试（如压力、负载测试）</td></tr><tr><td align="left"><strong>主要目的</strong></td><td align="left"><strong>“找茬”</strong>，证明系统在特定情况下会出问题，从而驱动质量提升。</td><td align="left"><strong>“兜底”</strong>，防止旧Bug复发，为快速迭代提供安全网，解放人力。</td></tr><tr><td align="left"><strong>核心优势</strong></td><td align="left"><strong>智能与灵活：</strong> 能适应变化，发现脚本无法预料的Bug。<br><strong>创造性：</strong> 能模拟人类千奇百怪的操作。<br><strong>直观反馈：</strong> 对界面、流程流畅度有直接感受。</td><td align="left"><strong>速度与效率：</strong> 分钟级执行成千上万个用例。<br><strong>可重复性与可靠性：</strong> 避免人为疏忽，结果一致。<br><strong>成本效益：</strong> 长期来看，回归测试成本极低。</td></tr><tr><td align="left"><strong>比喻</strong></td><td align="left"><strong>侦探</strong>：主动出击，深入调查，寻找线索（Bug）。</td><td align="left"><strong>哨兵</strong>：坚守岗位，按固定路线巡逻，确保防线安全。</td></tr></tbody></table><hr><h3 id="如何理解两者的关系：互补共生，而非相互替代"><a href="#如何理解两者的关系：互补共生，而非相互替代" class="headerlink" title="如何理解两者的关系：互补共生，而非相互替代"></a>如何理解两者的关系：互补共生，而非相互替代</h3><p>理解了它们的目的差异，就能清晰地看到二者的关系：<strong>它们不是谁取代谁，而是相辅相成、缺一不可的合作伙伴。</strong></p><ol><li><p><strong>项目生命周期中的协作：</strong></p><ul><li><strong>新功能开发阶段：</strong> 功能不稳定，需求可能变动。此时应主要由<strong>手工测试</strong>主导，进行探索性测试，深度挖掘新功能中的缺陷。在这个阶段投入自动化，脚本需要频繁修改，成本高昂。</li><li><strong>功能稳定后：</strong> 将那些稳定的、核心的、每次回归都需要执行的测试用例（如登录、下单等主干流程）<strong>转化为自动化脚本</strong>。这样就把测试人员从重复劳动中解放出来。</li></ul></li><li><p><strong>一个高效的工作流循环：</strong></p><ul><li>开发提交新代码后，<strong>自动化测试（哨兵）</strong> 首先上场，执行冒烟和回归测试，快速确认“系统防线”基本完好。</li><li>通过后，<strong>手工测试（侦探）</strong> 可以更专注于测试新功能和进行探索性测试，而不必担心基础功能被破坏。</li><li>手工测试发现的重大Bug被修复后，可以将其测试场景补充到自动化用例中，加固“防线”。</li></ul></li></ol><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>总而言之，将手工测试视为“破坏”和将自动化测试视为“验证”，是一种极具洞察力的视角。它告诉我们：</p><ul><li><strong>手工测试是“进攻方”</strong>，其价值在于<strong>发现新缺陷</strong>，是软件质量的深度勘探者。</li><li><strong>自动化测试是“防御方”</strong>，其价值在于<strong>守护现有质量</strong>，是软件迭代效率的加速器。</li></ul><p>一个成熟的测试团队必须善于利用这两种力量，让“侦探”和“哨兵”各司其职，协同作战，才能构建起一道坚实可靠的软件质量防线。</p><p>如果大家发现内容有错误，或有不同的观点想法，欢迎在评论区交流～也希望和同样在学测试开发的小伙伴互相鼓励，一起把“自动化”这件事做扎实！</p>]]></content>
    
    
    
    <tags>
      
      <tag>测试目的 原创</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识软件测试：我的入门学习记录与知识整理</title>
    <link href="/2025/09/22/%E5%88%9D%E8%AF%86%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%EF%BC%9A%E6%88%91%E7%9A%84%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/"/>
    <url>/2025/09/22/%E5%88%9D%E8%AF%86%E6%B5%8B%E8%AF%95%E5%BC%80%E5%8F%91%EF%BC%9A%E6%88%91%E7%9A%84%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%8E%E7%9F%A5%E8%AF%86%E6%95%B4%E7%90%86/</url>
    
    <content type="html"><![CDATA[<pre><code class="hljs"># 初识测试开发：我的入门学习记录与知识整理</code></pre><p>大家好～我是刚踏上测试开发学习之路的小白。此前对测试开发的认知还停留在“会写自动化脚本”的表层，最近开始系统梳理测试开发的基础逻辑——它并非单纯的“软件测试+代码”，而是需要在理解测试核心的同时，用技术手段提升测试效率。下面这份笔记，是我入门阶段对测试开发相关知识的整理，既是给自己的学习留个脚印，也希望能和同样起步的小伙伴交流；若内容有理解偏差或疏漏，特别欢迎前辈们在评论区指正！</p><h3 id="一、测试开发基础认知"><a href="#一、测试开发基础认知" class="headerlink" title="一、测试开发基础认知"></a>一、测试开发基础认知</h3><h4 id="1-核心脚本语言选择：这里有多种语言可选，主流中常用的像Java，Python等，这里笔者着重从所选Python语言进行学习"><a href="#1-核心脚本语言选择：这里有多种语言可选，主流中常用的像Java，Python等，这里笔者着重从所选Python语言进行学习" class="headerlink" title="1. 核心脚本语言选择：这里有多种语言可选，主流中常用的像Java，Python等，这里笔者着重从所选Python语言进行学习"></a>1. 核心脚本语言选择：这里有多种语言可选，主流中常用的像Java，Python等，这里笔者着重从所选Python语言进行学习</h4><p>测试开发初期，优先选择Python作为自动化脚本语言，核心原因在于其适配测试开发的特性：</p><ul><li>语法简单优雅，新手易上手，降低脚本开发门槛；</li><li>工具库丰富，如Web自动化（Selenium）、App自动化（Appium）、性能测试（Jmeter）均支持Python调用；</li><li>易读性强，便于团队协作维护脚本；</li><li>灵活性高，可快速搭建轻量级测试框架，满足不同场景的自动化需求。</li></ul><h4 id="2-测试开发的基石：什么是软件测试？"><a href="#2-测试开发的基石：什么是软件测试？" class="headerlink" title="2. 测试开发的基石：什么是软件测试？"></a>2. 测试开发的基石：什么是软件测试？</h4><p>测试开发的核心目标是“用技术提升测试效能”，但前提是理解软件测试的本质：<br>软件测试是通过人工或自动化手段运行、测定软件系统的过程，核心是检验功能是否符合需求、对比预期与实际结果的差异；最终目标是衡量产品是否满足客户需求——因此测试开发也需具备“客户思维”，确保自动化方案覆盖用户核心场景。</p><h4 id="3-软件测试的核心目的（测试开发需对齐的方向）"><a href="#3-软件测试的核心目的（测试开发需对齐的方向）" class="headerlink" title="3. 软件测试的核心目的（测试开发需对齐的方向）"></a>3. 软件测试的核心目的（测试开发需对齐的方向）</h4><ol><li><strong>满足需求是根本</strong>：无论手动测试还是自动化测试，最终都需验证功能与需求无偏差（测试开发需确保自动化用例100%覆盖核心需求）；</li><li><strong>发现缺陷是过程</strong>：测试的核心是“尽早发现更多Bug”，测试开发可通过自动化脚本实现“高频回归测试”，提前拦截旧缺陷复现；而“缺陷管理”是测试执行的核心，需规范记录、跟踪缺陷直至完全修复；</li><li><strong>保证质量是要点</strong>：从功能、性能、稳定性等多维度评估产品，测试开发可针对性设计自动化方案（如性能测试脚本、兼容性测试框架），提升质量保障效率。</li></ol><h4 id="4-测试开发的覆盖对象（不止代码）"><a href="#4-测试开发的覆盖对象（不止代码）" class="headerlink" title="4. 测试开发的覆盖对象（不止代码）"></a>4. 测试开发的覆盖对象（不止代码）</h4><p>测试开发的工作对象不仅是程序代码、安装包，还包括所有与开发相关的文档：项目计划、需求文档、设计文档、用户手册等——需通过自动化工具（如接口测试脚本）或人工核对，确保文档与产品功能一致，避免“文档与实际脱节”的问题。</p><h3 id="二、测试开发全周期交付物"><a href="#二、测试开发全周期交付物" class="headerlink" title="二、测试开发全周期交付物"></a>二、测试开发全周期交付物</h3><p>测试开发需贯穿项目全流程，输出的交付物除了传统测试文档，更需包含自动化相关资产，具体如下：</p><table><thead><tr><th>阶段</th><th>交付物名称</th><th>核心内容（突出测试开发视角）</th></tr></thead><tbody><tr><td>计划阶段</td><td>《测试计划》</td><td>明确测试范围、进度，重点规划自动化测试比例（如核心流程自动化率80%）、资源分配（脚本开发人员）</td></tr><tr><td>计划阶段</td><td>《测试方案》</td><td>确定测试策略，核心是自动化工具选型（如Web用Selenium、性能用Jmeter）、测试框架技术选型</td></tr><tr><td>设计阶段</td><td>《测试用例库》</td><td>结构化存储用例，需标记“自动化用例”与“手工用例”，自动化用例需便于脚本映射</td></tr><tr><td>设计阶段</td><td>《需求跟踪矩阵》</td><td>映射需求与用例，确保自动化用例覆盖核心需求，避免自动化遗漏</td></tr><tr><td>执行阶段</td><td>《测试日报》</td><td>除常规进度统计，需补充“自动化脚本执行率”“自动化发现缺陷数”等测试开发相关指标</td></tr><tr><td>执行阶段</td><td>《缺陷报告》</td><td>详细记录缺陷，自动化发现的缺陷需附脚本日志、执行截图，便于开发定位</td></tr><tr><td>收尾阶段</td><td>《测试报告》</td><td>总结测试结果，需包含自动化测试覆盖率、脚本执行效率（如手动需2小时，自动化仅10分钟）</td></tr><tr><td>收尾阶段</td><td>《上线报告》</td><td>确认版本符合上线标准，需说明自动化回归测试结果，附应急方案（如线上问题需快速执行回滚测试脚本）</td></tr><tr><td>过程资产</td><td>《会议纪要》</td><td>记录需求&#x2F;用例评审中“自动化可行性”的讨论结论（如某功能是否适合自动化）</td></tr><tr><td>过程资产</td><td>《自动化脚本&#x2F;框架》</td><td>存储于GitLab等代码仓库，需符合代码规范，支持Jenkins等工具实现CI自动运行，减少人工干预</td></tr></tbody></table><h3 id="三、测试用例：测试开发的“脚本依据”"><a href="#三、测试用例：测试开发的“脚本依据”" class="headerlink" title="三、测试用例：测试开发的“脚本依据”"></a>三、测试用例：测试开发的“脚本依据”</h3><h4 id="1-什么是测试用例？"><a href="#1-什么是测试用例？" class="headerlink" title="1. 什么是测试用例？"></a>1. 什么是测试用例？</h4><p>测试用例是为验证特定目标（如某需求点、程序路径）编制的集合，包含输入、执行条件、预期结果——它是测试开发编写自动化脚本的核心依据（无清晰用例的自动化脚本易“无的放矢”）。</p><h4 id="2-测试用例的基本要素（需适配自动化）"><a href="#2-测试用例的基本要素（需适配自动化）" class="headerlink" title="2. 测试用例的基本要素（需适配自动化）"></a>2. 测试用例的基本要素（需适配自动化）</h4><p>必须包含6个核心模块，且要素需便于脚本解析：</p><ul><li>测试索引（唯一标识，便于脚本关联用例）；</li><li>测试环境（如Windows 10+Chrome 120，自动化脚本需适配对应环境）；</li><li>测试输入（如账号“test01”，需明确格式以便脚本传参）；</li><li>测试操作（如“点击登录按钮”，需对应UI元素定位方式）；</li><li>预期结果（如“跳转首页”，需明确判断条件（如首页URL））；</li><li>评价标准（如“10秒内加载完成”，自动化脚本需设置超时时间）。</li></ul><h3 id="四、测试开发的2个关键原则"><a href="#四、测试开发的2个关键原则" class="headerlink" title="四、测试开发的2个关键原则"></a>四、测试开发的2个关键原则</h3><ol><li><strong>尽早介入，降低自动化成本</strong>：测试开发最好从需求阶段介入（如参与需求评审），提前判断功能的“自动化可行性”（如频繁变更的功能不建议优先自动化），避免后期重构脚本；</li><li><strong>贯穿全生命周期，嵌入自动化能力</strong>：测试开发不是“开发完才写脚本”，而是在每个阶段融入自动化思维，具体分工如下：<ul><li>立项&#x2F;启动阶段：参与制定测试计划，规划自动化范围；</li><li>需求调研阶段：输出《测试需求说明书》，标记自动化优先级；</li><li>设计（系统架构）阶段：编写《测试方案说明书》，搭建自动化测试框架（如Selenium+Python基础框架）；</li><li>研发阶段：细化用例，编写自动化脚本（如接口测试脚本、UI自动化脚本）；</li><li>测试阶段：执行自动化脚本，生成测试报告，优化脚本稳定性；</li><li>验收阶段：协助用户验证，提供自动化验收脚本（如核心流程验证脚本）；</li><li>投产阶段：在生产环境执行自动化冒烟脚本+主流程脚本，确保环境一致；</li><li>维护升级阶段：更新自动化框架与脚本，适配迭代版本，输出脚本维护报告。</li></ul></li></ol><h3 id="五、软件生命周期与测试开发实践"><a href="#五、软件生命周期与测试开发实践" class="headerlink" title="五、软件生命周期与测试开发实践"></a>五、软件生命周期与测试开发实践</h3><h4 id="1-软件生命周期的6个阶段（测试开发的介入点）"><a href="#1-软件生命周期的6个阶段（测试开发的介入点）" class="headerlink" title="1. 软件生命周期的6个阶段（测试开发的介入点）"></a>1. 软件生命周期的6个阶段（测试开发的介入点）</h4><ol><li><strong>需求分析与定义</strong>：通过调研、评审明确需求，输出《需求规格说明书》——测试开发需同步梳理“自动化需求清单”（如核心接口需自动化）；</li><li><strong>设计阶段</strong>：<ul><li>架构设计：输出《系统架构设计文档》——测试开发需确认接口设计是否便于自动化调用（如是否有清晰的API文档）；</li><li>详细设计：输出《详细设计说明书》——测试开发需确认UI元素是否有稳定的定位标识（如id、name）；</li></ul></li><li><strong>开发实现</strong>：开发编码并完成单元测试——测试开发可协助开发编写单元测试脚本（如Python的unittest框架），提升单元测试效率；</li><li><strong>测试阶段</strong>：执行集成、系统、验收测试——测试开发主导自动化测试执行，输出《自动化测试报告》；</li><li><strong>部署与维护</strong>：发布至生产环境——测试开发可编写线上监控脚本（如接口可用性监控），及时发现线上问题；</li><li><strong>退役阶段</strong>：停止旧版本维护——测试开发需归档自动化脚本与框架，便于后续参考。</li></ol><h4 id="2-常见软件生命周期模型（测试开发的适配方式）"><a href="#2-常见软件生命周期模型（测试开发的适配方式）" class="headerlink" title="2. 常见软件生命周期模型（测试开发的适配方式）"></a>2. 常见软件生命周期模型（测试开发的适配方式）</h4><table><thead><tr><th>模型名称</th><th>核心特点</th><th>测试开发适配实践</th><th>典型工具</th></tr></thead><tbody><tr><td>瀑布模型</td><td>阶段线性执行，需求固定，文档驱动</td><td>一次性搭建完整自动化框架，按阶段编写脚本</td><td>Visio（画框架图）、GitLab</td></tr><tr><td>敏捷模型</td><td>迭代增量开发（2-4周&#x2F;迭代），支持CI&#x2F;CD</td><td>迭代式开发脚本（每迭代新增&#x2F;优化脚本），集成Jenkins实现CI自动执行</td><td>Jira（任务管理）、Jenkins</td></tr><tr><td>V模型</td><td>测试与开发阶段一一对应，强调“测试左移”</td><td>需求阶段设计验收脚本、设计阶段设计系统测试脚本</td><td>Jira、Jenkins</td></tr><tr><td>螺旋模型</td><td>风险驱动多轮循环，通过原型验证风险</td><td>每轮循环后评估自动化脚本风险（如是否需重构），输出风险评估报告</td><td>风险评估表、GitLab</td></tr></tbody></table><h3 id="六、测试开发核心场景：冒烟测试与主流程验证"><a href="#六、测试开发核心场景：冒烟测试与主流程验证" class="headerlink" title="六、测试开发核心场景：冒烟测试与主流程验证"></a>六、测试开发核心场景：冒烟测试与主流程验证</h3><h4 id="1-冒烟测试：自动化准入的“第一道关卡”"><a href="#1-冒烟测试：自动化准入的“第一道关卡”" class="headerlink" title="1. 冒烟测试：自动化准入的“第一道关卡”"></a>1. 冒烟测试：自动化准入的“第一道关卡”</h4><ul><li><strong>定义</strong>：对核心功能进行快速自动化验证，确保版本“可测”（如登录、首页加载），避免无效测试投入——测试开发需主导冒烟脚本的开发与维护；</li><li><strong>有效开展要点（测试开发视角）</strong>：<ol><li>用例设计：仅覆盖主流程（如电商“搜索→加购→支付”），数量10-15条，脚本优先级设为“高”（例：登录脚本、首页导航脚本）；</li><li>执行时机：开发提测后，通过Jenkins自动触发冒烟脚本，环境就绪后1小时内输出报告，失败则自动通知开发；</li><li>工具支持：用Appium&#x2F;Selenium编写脚本，配置定时任务（如夜间执行），自动生成HTML报告；</li><li>结果处理：脚本检测到核心功能失败（如支付接口500错误），自动标记阻塞缺陷并同步至Jira，暂停全量测试。</li></ol></li></ul><h4 id="2-主流程验证：自动化的“核心场景覆盖”"><a href="#2-主流程验证：自动化的“核心场景覆盖”" class="headerlink" title="2. 主流程验证：自动化的“核心场景覆盖”"></a>2. 主流程验证：自动化的“核心场景覆盖”</h4><ul><li><strong>定义</strong>：模拟无异常的用户操作流程，验证核心功能正常——测试开发需确保主流程脚本100%稳定，作为回归测试的核心；</li><li><strong>核心特点</strong>：<ul><li>测试数据：脚本需内置真实有效数据（如正确手机号），支持参数化（如从Excel读取数据）；</li><li>测试环境：脚本需适配预生产&#x2F;测试环境，支持环境配置切换（如通过配置文件修改环境URL）；</li><li>预期结果：脚本需明确断言条件（如订单状态为“已支付”），确保流程100%成功；</li></ul></li><li><strong>为什么先做主流程自动化？</strong>：主流程是软件“能用”的基础，若脚本检测到主流程不通，其他自动化脚本无需执行，可大幅节省时间；且早期修复主流程缺陷的成本最低。</li></ul><h4 id="3-主流程自动化的应用场景"><a href="#3-主流程自动化的应用场景" class="headerlink" title="3. 主流程自动化的应用场景"></a>3. 主流程自动化的应用场景</h4><ol><li>每日构建验证：通过CI工具（如Jenkins）每天拉取最新代码，自动执行主流程脚本，确保开发未破坏基础功能；</li><li>版本转测试准入：开发提测前，需触发主流程脚本，通过后方可正式提测；</li><li>上线前最后回归：上线前执行主流程脚本，确保用户核心使用场景无问题。</li></ol><h3 id="七、测试开发视角下的测试分类"><a href="#七、测试开发视角下的测试分类" class="headerlink" title="七、测试开发视角下的测试分类"></a>七、测试开发视角下的测试分类</h3><p>测试开发需掌握不同类型测试的自动化实现方式，按维度划分如下：</p><h4 id="（一）按测试阶段划分（遵循V模型）"><a href="#（一）按测试阶段划分（遵循V模型）" class="headerlink" title="（一）按测试阶段划分（遵循V模型）"></a>（一）按测试阶段划分（遵循V模型）</h4><ol><li><p><strong>单元测试</strong>：验证代码最小单元（函数&#x2F;方法）——测试开发可协助开发用Python的unittest&#x2F;pytest框架编写单元测试脚本，实现单元测试自动化；</p><ul><li>执行者：开发主导，测试开发辅助；</li><li>目的：早发现代码逻辑错误，减少集成阶段问题。</li></ul></li><li><p><strong>集成测试</strong>：验证模块间接口&#x2F;交互——测试开发可编写接口自动化脚本（如用Requests库调用API），验证数据传递正确性；</p><ul><li>执行者：开发主导，测试开发编写脚本；</li><li>目的：排查模块衔接问题（如A模块输出无法被B模块识别）。</li></ul></li><li><p><strong>系统测试</strong>：验证系统整体功能、性能等——测试开发主导自动化实现：</p><ul><li>功能测试：用Selenium&#x2F;Appium实现UI自动化；</li><li>性能测试：用Jmeter编写性能脚本，模拟高并发；</li><li>兼容性测试：用Selenium Grid实现多浏览器&#x2F;系统自动化测试；</li><li>安全测试：用工具（如SQLMap）编写自动化扫描脚本，检测SQL注入；</li><li>回归测试：通过自动化脚本实现高频回归，避免旧缺陷复现；</li><li>冒烟测试：自动化脚本快速验证版本可测性；</li><li>执行者：测试开发。</li></ul></li><li><p><strong>验收测试</strong>：客户&#x2F;用户主导验证——测试开发提供自动化验收脚本（如核心流程脚本），辅助用户快速验证；</p><ul><li>阶段：Alpha（内部受控环境）、Beta（真实环境）；</li><li>目的：确认产品符合用户需求。</li></ul></li></ol><h4 id="（二）按测试技术划分"><a href="#（二）按测试技术划分" class="headerlink" title="（二）按测试技术划分"></a>（二）按测试技术划分</h4><ol><li><p><strong>黑盒测试</strong>：无需了解内部逻辑，按需求验证——测试开发可通过UI&#x2F;接口自动化脚本实现黑盒测试自动化（如Selenium脚本模拟用户操作）；</p><ul><li>方法：等价类划分、边界值分析（脚本需覆盖这些场景）。</li></ul></li><li><p><strong>白盒测试</strong>：需了解内部逻辑——测试开发可通过代码覆盖率工具（如Coverage.py）分析脚本覆盖度，确保白盒测试覆盖关键路径；</p><ul><li>方法：语句覆盖、条件覆盖（脚本需设计对应场景）；</li><li>执行者：开发为主，测试开发辅助。</li></ul></li><li><p><strong>灰盒测试</strong>：融合黑盒与白盒——测试开发常用灰盒测试实现接口自动化（如既验证接口输出，也关注接口内部数据处理逻辑）。</p></li></ol><h4 id="（三）按测试手段划分（测试开发核心关注）"><a href="#（三）按测试手段划分（测试开发核心关注）" class="headerlink" title="（三）按测试手段划分（测试开发核心关注）"></a>（三）按测试手段划分（测试开发核心关注）</h4><ol><li><p><strong>功能测试（手工测试）</strong>：人工执行用例——测试开发需识别“不适合自动化”的场景（如UI美观度、易用性），仅对高频场景自动化；</p><ul><li>适用：探索性测试、短期小需求。</li></ul></li><li><p><strong>自动化测试（测试开发核心工作）</strong>：用工具&#x2F;脚本实现测试自动化——测试开发需掌握脚本开发、框架设计、CI集成：</p><ul><li>优点：速度快、可重复、适合回归&#x2F;性能测试；</li><li>缺点：脚本开发维护成本高（需持续优化稳定性），无法完全替代手工；</li><li>核心工具：Web自动化（Selenium）、App自动化（Appium）、接口自动化（Requests）、性能测试（Jmeter）；</li><li>关键实践：脚本需模块化（如Page Object模式）、支持数据驱动（如Excel&#x2F;JSON传参）、集成CI&#x2F;CD（如Jenkins自动执行）。</li></ul></li></ol><p>以上就是我现阶段对测试开发的认知与整理～作为入门小白，我对很多深层内容（如测试框架的设计模式、性能测试的指标分析）还在探索中，脚本编写也常遇到“元素定位不稳定”“环境适配难”等问题。</p><p>如果大家发现内容有错误，或有更优的测试开发实践技巧（如脚本优化方法），欢迎在评论区交流～也希望和同样在学测试开发的小伙伴互相鼓励，一起把“自动化”这件事做扎实！</p>]]></content>
    
    
    
    <tags>
      
      <tag>-python -软件测试 -测试开发</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的成长之路</title>
    <link href="/2025/09/21/hello-world/"/>
    <url>/2025/09/21/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
